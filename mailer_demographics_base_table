/* */

DROP TABLE IF EXISTS coc_reporting.mailer_demographics_xf ;
CREATE TABLE coc_reporting.mailer_demographics_xf AS


/* */
WITH base AS (
  SELECT
    core_mailing.id AS mailing_id
    , TO_DATE(core_mailing.finished_at, 'YYYY-MM-DD') AS mailing_date 
      -- ^ finished_at has the best coverage of dates for mailers
    , regexp_substr(core_tag.name,'OWNER[1-9]?[1-9]?\\s([^,]+)',1,1,'e')  AS campaigner
      -- this regular expression accounts for owner name, pulling out the owner label
    , campaigners_2021.team AS campaign_team
    , core_usermailing.user_id
    --, core_user.subscription_status
  FROM coc_ak.core_mailing
  LEFT JOIN coc_ak.core_mailing_tags
    ON core_mailing.id = core_mailing_tags.mailing_id
  LEFT JOIN coc_ak.core_tag
  	ON core_mailing_tags.tag_id = core_tag.id
  LEFT JOIN coc_ak.core_usermailing
    ON core_mailing.id = core_usermailing.mailing_id
  --LEFT JOIN coc_ak.core_user
    --ON core_usermailing.user_id = core_user.id
  LEFT JOIN coc_reporting.campaigners_2021
    ON core_tag.id = campaigners_2021.tag_id
  WHERE core_tag.name iLIKE 'OWNER%' 
      -- The ilike will enable caps insensitive flags of owners
    AND core_mailing.expected_send_count > 0
    AND core_usermailing.user_id IS NOT NULL 
      -- ^ seeing some mailers that are sent once w/o user id. I'm guessing they're tests
    AND core_mailing.status = 'completed'
    AND mailing_date > '2020-01-01'


--ORDER BY mailing_date DESC LIMIT 50
--AND core_mailing.id = 50966
 -- ^ temp code to shorten run time while testing

)


/*Flag whether a user has opened a mailing. Row number field to dedup in the final select.*/
, opens AS (
  SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN core_open.user_id IS NOT NULL THEN 1 ELSE NULL END AS open_flag
    , ROW_NUMBER () OVER (PARTITION BY core_open.user_id, core_open.mailing_id ORDER BY core_open.created_at DESC) AS rank_opens
  FROM base
  INNER JOIN coc_ak.core_open -- Inner join, since I will be joining back to the base in the final select.
    ON base.mailing_id = core_open.mailing_id
    AND base.user_id = core_open.user_id
)


/*Flag whether a user has clicked a link from a mailing. Row number field to dedup in the final select.*/
/*, clicks AS (
  SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN core_click.user_id IS NOT NULL THEN 1 ELSE NULL END AS click_flag
    , ROW_NUMBER () OVER (PARTITION BY core_click.user_id, core_click.mailing_id  ORDER BY core_click.created_at DESC) AS rank_clicks
  FROM base
  INNER JOIN coc_ak.core_click -- Inner join, since I will be joining back to the base in the final select.
    ON base.mailing_id = core_click.mailing_id
    AND base.user_id = core_click.user_id
  LEFT JOIN coc_ak.core_clickurl
    ON core_click.clickurl_id = core_clickurl.id
  WHERE core_clickurl.url NOT LIKE '%unsubscribe%' -- Exclude clicks that were to unsubscribe
)*/


/*Flag whether a user took an action from a mailing. The code is based on how AK determined non-unsub actions.
Row number field to dedup in the final select.*/
, actions AS (
  SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN core_action.user_id IS NOT NULL THEN 1 ELSE NULL END AS action_flag
    , ROW_NUMBER () OVER (PARTITION BY core_action.user_id, core_action.mailing_id  ORDER BY core_action.updated_at DESC) AS rank_actions
  FROM base
  INNER JOIN coc_ak.core_action -- Inner join, since I will be joining back to the base in the final select.
    ON base.mailing_id  = core_action.mailing_id
    AND base.user_id = core_action.user_id
  LEFT JOIN coc_ak.core_unsubscribeaction
    ON core_unsubscribeaction.action_ptr_id = core_action.id
  WHERE action_ptr_id IS NULL -- Filter out actions that are unsubs.
    AND core_action.status = 'complete'
)


/*Flag whether a user unsubbed from a mailing, including if the email bounced. 
The code is based on how AK determined unsubs. Row number field to dedup in the final select.*/
/*, unsubs AS(
SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN base.user_id IS NOT NULL THEN 1 ELSE NULL END AS unsubscribe_flag
    , ROW_NUMBER () OVER (PARTITION BY core_action.user_id, core_action.mailing_id  ORDER BY core_action.updated_at DESC) AS rank_unsubs
  FROM base
  INNER JOIN coc_ak.core_action -- Inner joins, since I will be joining back to the base in the final select.
    ON base.mailing_id  = core_action.mailing_id
    AND base.user_id = core_action.user_id
  INNER JOIN coc_ak.core_unsubscribeaction
    ON core_unsubscribeaction.action_ptr_id = core_action.id
  INNER JOIN coc_ak.core_subscriptionhistory
    ON core_subscriptionhistory.action_id = core_action.id
)*/


, mailer_summary AS (
SELECT
  base.*
  --, unsubs.unsubscribe_flag 
  , opens.open_flag
  --, clicks.click_flag
  , actions.action_flag
FROM base
LEFT JOIN opens
  ON base.mailing_id = opens.mailing_id
  AND base.user_id = opens.user_id
  AND rank_opens = 1 -- Deduping by user
/*LEFT JOIN clicks
  ON base.mailing_id = clicks.mailing_id
  AND base.user_id = clicks.user_id
  AND rank_clicks = 1 -- Deduping by user*/
LEFT JOIN actions
  ON base.mailing_id = actions.mailing_id
  AND base.user_id = actions.user_id
  AND rank_actions = 1 -- Deduping by user
/*LEFT JOIN unsubs
  ON base.mailing_id = unsubs.mailing_id
  AND base.user_id = unsubs.user_id
  AND rank_unsubs = 1 -- Deduping by user*/
)


/*Final select join to the voterfile via coc_reporting.ak_vf_member_demographics. It brings in demographics desired in
the final table and formats them into buckets.*/
SELECT
  mailer_summary.*
  , CASE 
      WHEN dems.age < 25 THEN '18-24'
      WHEN dems.age >= 25 AND dems.age < 35 THEN '25-34'
      WHEN dems.age >= 35 AND dems.age < 50 THEN '35-49'
      WHEN dems.age >= 50  THEN '50+'
      ELSE NULL
    END AS age_buckets
  , CASE WHEN dems.gender = 'Unknown' THEN NULL
      ELSE dems.gender
    END AS gender_buckets
  , dems.vb_state AS state_buckets
    -- ^ ALready formated in correct buckets.
  , CASE
      WHEN household_net_worth = '< $25,000' THEN '< $49k'
      WHEN household_net_worth = '$25,000 - $49,999' THEN '< $49k'
      WHEN household_net_worth = '$50,000 - $74,999' THEN '$50 - 99k'
      WHEN household_net_worth = '$75,000 - $99,999' THEN '$50 - 99k'
      WHEN household_net_worth = '$100,000 - $149,999' THEN '$100 - 199k'
      WHEN household_net_worth = '$150,000 - $199,999' THEN '$100 - 199k'
      WHEN household_net_worth = '$200,000 - $249,999' THEN '$200 - 499k'
      WHEN household_net_worth = '$250,000 - $499,999' THEN '$200 - 499k'
      WHEN household_net_worth = '$500,000 - $749,999' THEN '$500 - 999k'
      WHEN household_net_worth = '$750,000 - $999,999' THEN '$500 - 999k'
      WHEN household_net_worth = '$1,000,000 - $2,499,999' THEN '> $1m'
      WHEN household_net_worth = '$2,500,000 - $4,999,999' THEN '> $1m'
      WHEN household_net_worth = '$5,000,000 - $9,999,999' THEN '> $1m'
      WHEN household_net_worth = '> $10,000,000' THEN '> $1m'
      ELSE NULL
    END AS household_net_worth_buckets
  , CASE
      WHEN highest_education = 'Unknown' THEN NULL
      WHEN highest_education = 'High School' THEN 'High School or less'
      WHEN highest_education = 'Some College' THEN 'Some College'
      WHEN highest_education = 'College Graduate'THEN 'College Graduate'
      WHEN highest_education = 'Post Graduate' THEN 'Post Graduate'
      WHEN highest_education = 'Less than High School Diploma' THEN 'High School or less'
      ELSE NULL
    END AS highest_education_buckets
  , CASE
      WHEN family_composition = 'Single' THEN 'Single no children'
      WHEN family_composition = 'Single with children' THEN 'Has Children'
      WHEN family_composition = 'Couple' THEN 'Couple no children'
      WHEN family_composition = 'Couple with children' THEN 'Has children'
      WHEN family_composition = 'Multiple generations' THEN 'Has children'
      WHEN family_composition = 'More than 3 surnames' THEN 'Other'
      WHEN family_composition = 'Other' THEN 'Other'
      ELSE NULL
    END AS family_composition_buckets
  , purely_social_network_score AS facebook_score
  , personal_voice_social_network_score AS twitter_score
      -- ^ These two scores will be aggregates in the final table. I cannot calculate them now.
  , CASE
      WHEN healthcare_score >= 0 AND healthcare_score < 25 THEN '0-24'
      WHEN healthcare_score >= 25 AND healthcare_score < 50 THEN '25-49'
      WHEN healthcare_score >= 50 AND healthcare_score < 75 THEN '50-74'
      WHEN healthcare_score >= 75 AND healthcare_score <= 100 THEN '75-100'
      ELSE NULL
    END AS healthcare_score_buckets
  , CASE
      WHEN progressive_tax_score >= 0 AND progressive_tax_score < 25 THEN '0-24'
      WHEN progressive_tax_score >= 25 AND progressive_tax_score < 50 THEN '25-49'
      WHEN progressive_tax_score >= 50 AND progressive_tax_score < 75 THEN '50-74'
      WHEN progressive_tax_score >= 75 AND progressive_tax_score <= 100 THEN '75-100'
      ELSE NULL
    END AS progressive_tax_score_buckets
  , CASE
      WHEN racial_resentment_score >= 0 AND racial_resentment_score < 25 THEN '0-24'
      WHEN racial_resentment_score >= 25 AND racial_resentment_score < 50 THEN '25-49'
      WHEN racial_resentment_score >= 50 AND racial_resentment_score < 75 THEN '50-74'
      WHEN racial_resentment_score >= 75 AND racial_resentment_score <= 100 THEN '75-100'
      ELSE NULL
    END AS racial_resentment_score_buckets
  , CASE
      WHEN gun_control_score >= 0 AND gun_control_score < 25 THEN '0-24'
      WHEN gun_control_score >= 25 AND gun_control_score < 50 THEN '25-49'
      WHEN gun_control_score >= 50 AND gun_control_score < 75 THEN '50-74'
      WHEN gun_control_score >= 75 AND gun_control_score <= 100 THEN '75-100'
      ELSE NULL
    END AS gun_control_score_buckets
    
FROM mailer_summary
LEFT JOIN coc_reporting.ak_vf_member_demographics AS dems
  ON mailer_summary.user_id = dems.ak_userid
  AND latest_voterbase_id_match = 1
  
;


-- Grant access:
GRANT SELECT ON coc_reporting.mailer_demographics_xf TO GROUP coc;
GRANT ALL ON coc_reporting.mailer_demographics_xf TO jshang, jharris1;