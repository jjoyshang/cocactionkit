/* 
This script creates a basetable for a dashboard on Mailer Demographics for the Campaigns team. The goal of the basetable 
is to summarize demographics of our members for every mailer we've sent since 2020. For each mailer, demographics are 
summarized by engagement type: all recipients, opens, and actions. 

It builds off an intermediary table (coc_reporting.mailer_demograpics_xf) which filtered which mailers to include, 
flagged users who opened or took action on a mailer, and formated demographics into buckets.

See the full WORKFLOW HERE: https://platform.civisanalytics.com/spa/#/workflows/37375/executions/2623479


This script is composed of a series of CTEs which are almost identical, with one CTE for each demographic and engagement 
type (all, opens, actions). Each CTE filters for the demographic and engagement type, then calculates the demographic 
measurement for each bucket as a percent.

The final select brings all of these CTEs together with UNION ALL statements.

Demographics included:
  Age
  Gender
  State
  Household Net Worth
  Highest Education
  Family Composition
  Facebook Score
  Twitter Score
  Healthcare Score
  Progressive Tax Score
  Racial Resentment Score
  Gun Control Score

Table Field names:
  mailing_id
  mailing_date
  demographic
  categories
  count_members
*/




DROP TABLE IF EXISTS coc_reporting.mailer_demographics ;
CREATE TABLE coc_reporting.mailer_demographics AS


/* This CTE looks at All members who received a mailer. Per mailer, it groups members into age buckets and calculates
the percentage of members in each bucket. */

-- AGE --
WITH age_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the age of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'age' AS demographic
    , age_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE age_buckets IS NOT NULL
       -- ^ Only include members who have an age in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, age_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
    
    
FROM (
  -- This subquery formats the age of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'age' AS demographic
    , age_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND age_buckets IS NOT NULL
      -- ^ Only include members who have an age in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, age_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the age of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'age' AS demographic
    , age_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND age_buckets IS NOT NULL
      -- ^ Only include members who have an age in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- GENDER --
, gender_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'gender' AS demographic
    , gender_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE gender_buckets IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, gender_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'gender' AS demographic
    , gender_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND gender_buckets IS NOT NULL
      -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, gender_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the age of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'gender' AS demographic
    , gender_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND age_buckets IS NOT NULL
      -- ^ Only include members who have an age in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- STATE --
, state_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'state' AS demographic
    , state_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE state_buckets IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, state_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'state' AS demographic
    , state_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND state_buckets IS NOT NULL
      -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, state_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the age of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'state' AS demographic
    , state_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND state_buckets IS NOT NULL
      -- ^ Only include members who have an age in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- HOUSEHOLD NET WORTH --
, networth_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'household_net_worth' AS demographic
    , household_net_worth_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE household_net_worth_buckets IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


, networth_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'household_net_worth' AS demographic
    , household_net_worth_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND household_net_worth_buckets IS NOT NULL
      -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, networth_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the age of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'household_net_worth' AS demographic
    , household_net_worth_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND household_net_worth_buckets IS NOT NULL
      -- ^ Only include members who have an age in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- HIGHEST EDUCATION --
, education_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'highest_education' AS demographic
    , highest_education_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE highest_education_buckets IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, education_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'highest_education' AS demographic
    , highest_education_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND highest_education_buckets IS NOT NULL
      -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, education_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the age of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'highest_education' AS demographic
    , highest_education_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND highest_education_buckets IS NOT NULL
      -- ^ Only include members who have an age in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- FAMILY COMPOSITION --
, family_all AS (
SELECT
  temp.mailing_id
  , mailing_date
 
  
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'family_composition' AS demographic
    , family_composition_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE family_composition_buckets IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, family_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'family_composition' AS demographic
    , family_composition_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND family_composition_buckets IS NOT NULL
      -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


, family_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'family_composition' AS demographic
    , family_composition_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND family_composition_buckets IS NOT NULL
      -- ^ Only include members who have this demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- FACEBOOK SCORE --
, facebook_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
   
    
    , 'facebook_score' AS demographic
    , 'average_likelihood to use' AS categories
    , AVG(facebook_score) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE facebook_score IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


, facebook_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'facebook_score' AS demographic
    , 'average_likelihood to use' AS categories
    , AVG(facebook_score) AS value  
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND facebook_score IS NOT NULL
         -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


, facebook_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'facebook_score' AS demographic
    , 'average_likelihood to use' AS categories
    , AVG(facebook_score::decimal(10,2)) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND facebook_score IS NOT NULL
         -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- TWITTER SCORE --
, twitter_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'twitter_score' AS demographic
    , 'average_likelihood to use' AS categories
    , AVG(twitter_score) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE twitter_score IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


, twitter_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'twitter_score' AS demographic
    , 'average_likelihood to use' AS categories
    , AVG(twitter_score) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND twitter_score IS NOT NULL
         -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, twitter_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'twitter_score' AS demographic
    , 'average_likelihood to use' AS categories
    , AVG(twitter_score) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND twitter_score IS NOT NULL
         -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- HEALTHCARE SCORE --
, healthcare_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
  FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'healthcare_score' AS demographic
    , healthcare_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE healthcare_score_buckets IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, healthcare_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'healthcare_score' AS demographic
    , healthcare_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND healthcare_score_buckets IS NOT NULL
      -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, healthcare_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'healthcare_score' AS demographic
    , healthcare_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND healthcare_score_buckets IS NOT NULL
      -- ^ Only include members who have this demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- PROGRESSIVE TAX SCORE --
, tax_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'progressive_tax_score' AS demographic
    , progressive_tax_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE progressive_tax_score_buckets IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, tax_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'progressive_tax_score' AS demographic
    , progressive_tax_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND progressive_tax_score_buckets IS NOT NULL
      -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


, tax_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats this demographic of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'progressive_tax_score' AS demographic
    , progressive_tax_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND progressive_tax_score_buckets IS NOT NULL
  -- This subquery formats the demographic into buckets.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- RACIAL RESENTMENT TAX SCORE --
, resentment_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'racial_resentment_score' AS demographic
    , racial_resentment_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE racial_resentment_score_buckets IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, resentment_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'racial_resentment_score' AS demographic
    , racial_resentment_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND racial_resentment_score_buckets IS NOT NULL
      -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, resentment_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'racial_resentment_score' AS demographic
    , racial_resentment_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND racial_resentment_score_buckets IS NOT NULL
      -- ^ Only include members who have this demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

-- GUN CONTROL SCORE --
, gun_all AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'All' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets. 
  SELECT
    mailing_id
    , mailing_date
    , 'gun_control_score' AS demographic
    , gun_control_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE gun_control_score_buckets IS NOT NULL
       -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, gun_opens AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Opens' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic of members into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'gun_control_score' AS demographic
    , gun_control_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE open_flag = 1
      -- ^ Filter for users who were flagged to have opened the mailer
    AND gun_control_score_buckets IS NOT NULL
      -- ^ Only include members who have a demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)

, gun_actions AS (
SELECT
  temp.mailing_id
  , mailing_date
  , 'Actions' AS engagement
  , demographic
  , categories
  , value AS count_members
FROM (
  -- This subquery formats the demographic into buckets.
  SELECT
    mailing_id
    , mailing_date
    , 'gun_control_score' AS demographic
    , gun_control_score_buckets AS categories
    , COUNT(user_id) AS value
  FROM coc_reporting.mailer_demographics_xf
  WHERE action_flag = 1
      -- ^ Filter for users who were flagged to have taken action from the mailer
    AND gun_control_score_buckets IS NOT NULL
      -- ^ Only include members who have this demographic in the voter file.
  GROUP BY 1,2,3,4
  ) AS temp
)


-- JOIN ALL DEMOGRAPHICS --
SELECT * FROM age_all
UNION ALL
SELECT * FROM age_opens
UNION ALL
SELECT * FROM age_actions
UNION ALL
SELECT * FROM gender_all
UNION ALL
SELECT * FROM gender_opens
UNION ALL
SELECT * FROM gender_actions
UNION ALL
SELECT * FROM state_all
UNION ALL
SELECT * FROM state_opens
UNION ALL
SELECT * FROM state_actions
UNION ALL
SELECT * FROM networth_all
UNION ALL
SELECT * FROM networth_opens
UNION ALL
SELECT * FROM networth_actions
UNION ALL
SELECT * FROM education_all
UNION ALL
SELECT * FROM education_opens
UNION ALL
SELECT * FROM education_actions
UNION ALL
SELECT * FROM family_all
UNION ALL
SELECT * FROM family_opens
UNION ALL
SELECT * FROM family_actions
UNION ALL
SELECT * FROM facebook_all
UNION ALL
SELECT * FROM facebook_opens
UNION ALL
SELECT * FROM facebook_actions
UNION ALL
SELECT * FROM twitter_all
UNION ALL
SELECT * FROM twitter_opens
UNION ALL
SELECT * FROM twitter_actions
UNION ALL
SELECT * FROM healthcare_all
UNION ALL
SELECT * FROM healthcare_opens
UNION ALL
SELECT * FROM healthcare_actions
UNION ALL
SELECT * FROM tax_all
UNION ALL
SELECT * FROM tax_opens
UNION ALL
SELECT * FROM tax_actions
UNION ALL
SELECT * FROM resentment_all
UNION ALL
SELECT * FROM resentment_opens
UNION ALL
SELECT * FROM resentment_actions
UNION ALL
SELECT * FROM gun_all
UNION ALL
SELECT * FROM gun_opens
UNION ALL
SELECT * FROM gun_actions

;


-- Grant access:
GRANT SELECT ON coc_reporting.mailer_demographics TO GROUP coc;
GRANT ALL ON coc_reporting.mailer_demographics TO jshang, jharris1;