/*This table attributes demographic fields from the voterfile to users in ActionKit.

Note that not all users in ActionKit could be matched to a person in the voterbase. Therefore, each voterfile record is only included for its most recent match to the Activist Pool.


I recommend filering this table by subscription status ('ak_sub_status') and 'deceased_flag IS NOT NULL'.

You can query this table by user ids in ActionKit, person ids in the Activist Pool (latest_person_id_match = 1), or voterbase ids (latest_voterbase_id_match = 1). */



DROP TABLE IF EXISTS coc_reporting.ak_vf_member_demographics;
CREATE TABLE coc_reporting.ak_vf_member_demographics AS


WITH ak_base AS (
SELECT
	core_user.id AS ak_userid -- to match with tmc_activist_pool
  , core_user.email AS ak_email
  , subscription_status AS ak_sub_status-- include to filter by 'subscribed', 'unsubscribed', 'bounced' and 'never'.
-- Including location fields here as a backup, since not all ak_userids match to a person_id. Will be combined with Activist Pool location fields in final select.
  , UPPER(city) AS ak_city
  , state AS ak_state
  , zip AS ak_zip
  , COUNT(core_action.id) AS ak_count_actions -- Count the number of actions. Not the most useful metric since so many things count as an action.

FROM coc_ak.core_user
LEFT JOIN coc_ak.core_action
	ON core_user.id = core_action.user_id

WHERE core_action.status = 'complete'

GROUP BY 1,2,3,4,5,6 -- Group by core_user.id first. The rest don't matter.
)


-- Joining AK users to voterbase_id through TMC activist pool
, ak_tmc_join AS (
SELECT
	ak_base.*
  	, coc_person_fields.first_name AS tmc_first_name
    , coc_person_fields.last_name AS tmc_last_name
  	, coc_person_fields.person_id AS tmc_person_id
  	, coc_identities.voterbase_id AS tmc_voterbase_id

/* Calculate the most recently matching person_id to ak_userid, with multiple ak_userids matching to one person_id. Therefore, I will not be deduping by person_id in this query. But it will be an option to filter in queries referencing this basetable to only the most recet matching person_id.*/
  	, CASE WHEN coc_identities.person_id IS NOT NULL THEN (ROW_NUMBER () OVER (PARTITION BY coc_identities.person_id ORDER BY NVL(coc_identities.updated_at, NULL) DESC NULLS LAST))
  				ELSE 1
  			END AS latest_person_id_match -- Formatting as a CASE WHEN so that all null values are kept, instead of being collapsed into one.
  
  /*I will NOT be using a CTE in this query to filter for only the most recently matched voterbase_id. This is because TMC can match hundreds of person_ids to a single voterbase_id, and I do not want to lose the data for those hundreds of people if this table is needed to join to other databases. INSTEAD, any Selects that are joining to the voterfile should filter for the latest voterbase_id, to only include one record for each person in the voter file (rather than potentially having 300 records of the same person). */
  	, CASE WHEN coc_identities.voterbase_id IS NOT NULL THEN (ROW_NUMBER () OVER (PARTITION BY coc_identities.voterbase_id ORDER BY NVL(coc_identities.updated_at, NULL) DESC NULLS LAST))
  				ELSE 1
  			END AS latest_voterbase_id_match -- Formatting as a CASE WHEN so that all null values are kept, instead of being collapsed into one.
  
FROM ak_base

-- Left Join, since want to include all people from Action Kit. And only records from Activist Pool if they match.
LEFT JOIN tmc_activist_pool.coc_person_fields
	ON coc_person_fields.primary_key = ak_base.ak_userid
    AND coc_person_fields.vendor = 'action_kit'
LEFT JOIN tmc_activist_pool.coc_identities
  	ON coc_person_fields.person_id = coc_identities.person_id
)
  

, voterfile_join AS (
-- Joining to voterfile. Bringing in a bunch of fields that seem interesting for now.
SELECT
	ak_userid AS vb_ak_userid

-- Demographic fields from the voterfile:
---- All current fields have been checked for 80% coverage (of users that match)
  , ntl_current.vb_voterbase_deceased_flag AS deceased_flag -- Something I could filter, if desired
  , vb_tsmart_city AS vb_city
  , vb_tsmart_state AS vb_state
  , vb_tsmart_zip AS vb_zip
  , ntl_current.vb_voterbase_age AS age
	, ntl_current.vb_voterbase_gender AS gender
	, CASE WHEN ntl_current.vb_voterbase_race = 'Uncoded' THEN 'Unknown'
  		ELSE ntl_current.vb_voterbase_race
  	END AS race
  		-- ^Renaming to be more clear and less technial.
	, ntl_current.vb_voterbase_marital_status AS marital_status
  , CASE
      	WHEN ntl_current.vb_family_composition_code = 'A' THEN 'Single'
      	WHEN ntl_current.vb_family_composition_code = 'B' THEN 'Single with children'
      	WHEN ntl_current.vb_family_composition_code = 'C' THEN 'Couple'
      	WHEN ntl_current.vb_family_composition_code = 'D' THEN 'Couple with children'
      	WHEN ntl_current.vb_family_composition_code = 'E' THEN 'Multiple generations'
       	WHEN ntl_current.vb_family_composition_code = 'F' THEN 'More than 3 surnames'
        WHEN ntl_current.vb_family_composition_code = 'G' THEN 'Other'
       	ELSE ntl_current.vb_family_composition_code 
    	END AS family_composition
  , ntl_current.vb_number_of_children_in_household AS number_children
  , CASE
      	WHEN ntl_current.vb_homeowner_indicator = 'Y' THEN 'Yes'
      	WHEN ntl_current.vb_homeowner_indicator = 'N' THEN 'No'
      	WHEN ntl_current.vb_homeowner_indicator = 'U' THEN 'Unknown'
       	ELSE ntl_current.vb_homeowner_indicator 
    	END AS homeowner_indicator
  , CASE
  			WHEN ntl_current.vb_household_income_amount < 25 THEN '< $25,000'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 25 AND ntl_current.vb_household_income_amount < 50 THEN '$25,000 - $49,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 50 AND ntl_current.vb_household_income_amount < 75 THEN '$50,000 - $74,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 75 AND ntl_current.vb_household_income_amount < 100 THEN '$75,000 - $99,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 100 AND ntl_current.vb_household_income_amount < 150 THEN '$100,000 - $149,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 150 AND ntl_current.vb_household_income_amount < 200 THEN
'$150,000 - $199,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 150 AND ntl_current.vb_household_income_amount < 200 THEN '$150,000 - $199,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 200 AND ntl_current.vb_household_income_amount < 250 THEN '$200,000 - $249,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 250 AND ntl_current.vb_household_income_amount < 500 THEN '$250,000 - $499,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 500 AND ntl_current.vb_household_income_amount < 750 THEN '$500,000 - $749,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 750 AND ntl_current.vb_household_income_amount < 1000 THEN '$750,000 - $999,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 1000 AND ntl_current.vb_household_income_amount < 2500 THEN '$1,000,000 - $2,499,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 2500 THEN '> $2,500,000'::varchar
  			ELSE ntl_current.vb_household_income_amount::varchar
  	END AS household_income_buckets
  , CASE
        WHEN household_income_buckets = '< $25,000' THEN '< $25k'
        WHEN household_income_buckets = '$25,000 - $49,999' THEN '$25-49k'
        WHEN household_income_buckets = '$50,000 - $74,999' THEN '$50-74k'
        WHEN household_income_buckets = '$75,000 - $99,999' THEN '$75-99k'
        WHEN household_income_buckets = '$100,000 - $149,999' THEN '$100-149k'
        WHEN household_income_buckets = '$150,000 - $199,999' THEN '$150-199k'
        WHEN household_income_buckets = '$200,000 - $249,999' THEN '$200-499k'
        WHEN household_income_buckets = '$250,000 - $499,999' THEN '$200-499k'
        WHEN household_income_buckets = '$500,000 - $749,999' THEN '$500k+'
        WHEN household_income_buckets = '$750,000 - $999,999' THEN '$500k+'
        WHEN household_income_buckets = '$1,000,000 - $2,499,999' THEN '$500k+'
        WHEN household_income_buckets = '> $2,500,000' THEN '$500k+'
        ELSE household_income_buckets
    END AS household_income_clean
  , CASE
      	WHEN ntl_current.vb_household_net_worth = 'A' THEN '< $25,000'
      	WHEN ntl_current.vb_household_net_worth = 'B' THEN '$25,000 - $49,999'
      	WHEN ntl_current.vb_household_net_worth = 'C' THEN '$50,000 - $74,999'
      	WHEN ntl_current.vb_household_net_worth = 'D' THEN '$75,000 - $99,999'
      	WHEN ntl_current.vb_household_net_worth = 'E' THEN '$100,000 - $149,999'
       	WHEN ntl_current.vb_household_net_worth = 'F' THEN '$150,000 - $199,999'
        WHEN ntl_current.vb_household_net_worth = 'G' THEN '$200,000 - $249,999'
       	WHEN ntl_current.vb_household_net_worth = 'H' THEN '$250,000 - $499,999'
        WHEN ntl_current.vb_household_net_worth = 'I' THEN '$500,000 - $749,999'
        WHEN ntl_current.vb_household_net_worth = 'J' THEN '$750,000 - $999,999'
        WHEN ntl_current.vb_household_net_worth = 'K' THEN '$1,000,000 - $2,499,999'
        WHEN ntl_current.vb_household_net_worth = 'L' THEN '$2,500,000 - $4,999,999'
        WHEN ntl_current.vb_household_net_worth = 'M' THEN '$5,000,000 - $9,999,999'
        WHEN ntl_current.vb_household_net_worth = 'N' THEN '> $10,000,000'
       	ELSE ntl_current.vb_household_net_worth
    	END AS household_net_worth
  , CASE
      	WHEN ntl_current.vb_education = '0' THEN 'Unknown'::varchar
      	WHEN ntl_current.vb_education = '1' THEN 'High School'::varchar
      	WHEN ntl_current.vb_education = '2' THEN 'Some College'::varchar
      	WHEN ntl_current.vb_education = '3' THEN 'College Graduate'::varchar
      	WHEN ntl_current.vb_education = '4' THEN 'Post Graduate'::varchar
        WHEN ntl_current.vb_education = '6' THEN 'Less than High School Diploma'::varchar
       	ELSE ntl_current.vb_education::varchar
    	END AS highest_education
  , CASE
      	WHEN ntl_current.ts_tsmart_urbanicity = 'R1' THEN '1 Rural (least dense)'
      	WHEN ntl_current.ts_tsmart_urbanicity = 'R2' THEN '2 Rural'
      	WHEN ntl_current.ts_tsmart_urbanicity = 'S3' THEN '3 Suburban'
      	WHEN ntl_current.ts_tsmart_urbanicity = 'S4' THEN '4 Suburban'
      	WHEN ntl_current.ts_tsmart_urbanicity = 'U5' THEN '5 Urban'
        WHEN ntl_current.ts_tsmart_urbanicity = 'U6' THEN '6 Urban (most dense)'
       	ELSE ntl_current.ts_tsmart_urbanicity
    	END AS urbanicity
    , CASE
    	WHEN ts_tsmart_catholic_raw_score >= ts_tsmart_evangelical_raw_score 
          AND ts_tsmart_catholic_raw_score >= ts_tsmart_jewish_raw_score
          AND ts_tsmart_catholic_raw_score >= ts_tsmart_mormon_raw_score
          AND ts_tsmart_catholic_raw_score >= ts_tsmart_non_religious_raw_score
          THEN 'Catholic'
          ELSE CASE
       WHEN ts_tsmart_evangelical_raw_score >= ts_tsmart_catholic_raw_score
          AND ts_tsmart_evangelical_raw_score >= ts_tsmart_jewish_raw_score
          AND ts_tsmart_evangelical_raw_score >= ts_tsmart_mormon_raw_score
          AND ts_tsmart_evangelical_raw_score >= ts_tsmart_non_religious_raw_score
          THEN 'Evangelical'
          ELSE CASE
       WHEN ts_tsmart_jewish_raw_score >= ts_tsmart_catholic_raw_score
       		AND ts_tsmart_jewish_raw_score >= ts_tsmart_evangelical_raw_score
          AND ts_tsmart_jewish_raw_score >= ts_tsmart_mormon_raw_score
          AND ts_tsmart_jewish_raw_score >= ts_tsmart_non_religious_raw_score
          THEN 'Jewish'
          ELSE CASE
       WHEN ts_tsmart_mormon_raw_score >= ts_tsmart_catholic_raw_score
       		AND ts_tsmart_mormon_raw_score >= ts_tsmart_evangelical_raw_score
       		AND ts_tsmart_mormon_raw_score >= ts_tsmart_jewish_raw_score
      		AND ts_tsmart_mormon_raw_score >= ts_tsmart_non_religious_raw_score
          THEN 'Mormon'
        ELSE CASE
       WHEN ts_tsmart_non_religious_raw_score >= ts_tsmart_catholic_raw_score
      	 	AND ts_tsmart_non_religious_raw_score >= ts_tsmart_evangelical_raw_score
          AND ts_tsmart_non_religious_raw_score >= ts_tsmart_jewish_raw_score
          AND ts_tsmart_non_religious_raw_score >= ts_tsmart_mormon_raw_score
          THEN 'Non-Religious'
        ELSE 'Unknown'
        END
        END
        END
        END
     END AS religion_highest_score
  , CASE
  			WHEN religion_highest_score = 'Catholic' THEN ts_tsmart_catholic_raw_score
        WHEN religion_highest_score = 'Evangelical' THEN ts_tsmart_evangelical_raw_score
        WHEN religion_highest_score = 'Jewish' THEN ts_tsmart_jewish_raw_score
        WHEN religion_highest_score = 'Mormon' THEN ts_tsmart_mormon_raw_score
        WHEN religion_highest_score = 'Non-Religious' THEN ts_tsmart_non_religious_raw_score
     	 ELSE NULL
		 END AS religion_score_number

   , ntl_current.vb_vf_party AS political_party
    
  , ntl_current.ts_tsmart_partisan_score AS partisan_score
  , ntl_current.ts_tsmart_presidential_general_turnout_score AS presidential_general_turnout_score
  , ntl_current.ts_tsmart_midterm_general_turnout_score AS midterm_general_turnout_score
  , ntl_current.ts_tsmart_presidential_general_enthusiasm_score AS presidential_general_enthusiasm_score
  , ntl_current.ts_tsmart_local_voter_score AS local_voter_score
  , ntl_current.ts_tsmart_activist_score AS activist_score
  , ntl_current.ts_tsmart_trump_defector_score AS trump_defector_score
  , ntl_current.ts_tsmart_biden_support_score AS biden_support_score 
  , ntl_current.ts_tsmart_veteran_score AS veteran_score
  	-- ^A higher score indicates a higher likelihood that a person is a military veteran or an active service member.
   , ntl_current.ts_tsmart_gunowner_score AS gunowner_score
  	-- ^A higher score indicates a higher likelihood that a person is a gunowner.
  , ntl_current.ts_tsmart_working_class_score AS working_class_score
  , CASE
      WHEN working_class_score >= 0 and working_class_score <= 10 THEN 10
      WHEN working_class_score > 10 and working_class_score <= 20  THEN 20
      WHEN working_class_score > 20 and working_class_score <= 30  THEN 30
      WHEN working_class_score > 30 and working_class_score <= 40  THEN 40
      WHEN working_class_score > 40 and working_class_score <= 50  THEN 50
      WHEN working_class_score > 50 and working_class_score <= 60  THEN 60
      WHEN working_class_score > 60 and working_class_score <= 70  THEN 70
      WHEN working_class_score > 70 and working_class_score<= 80  THEN 80
      WHEN working_class_score > 80 and working_class_score <= 90  THEN 90
      WHEN working_class_score > 90 and working_class_score <= 100  THEN 100
    ELSE NULL
    END AS working_class_score_clean

  , ntl_current.predictwise_racial_resentment_score AS racial_resentment_score
  	-- ^The model was built off questions pertaining to black work ethic, historical discrimination, crime, and black protest. The score ranges from 0-100, with 0 meaning an individual is not at all racially resentful, and 100 meaning an individual is extremely racially resentful.
  
  , ntl_current.ts_tsmart_yale_climate_alarmed_score AS climate_alarm_score
  , CASE
      WHEN climate_alarm_score >= 0 and climate_alarm_score <= 10 THEN 10
      WHEN climate_alarm_score > 10 and climate_alarm_score <= 20  THEN 20
      WHEN climate_alarm_score > 20 and climate_alarm_score <= 30  THEN 30
      WHEN climate_alarm_score > 30 and climate_alarm_score <= 40  THEN 40
      WHEN climate_alarm_score > 40 and climate_alarm_score <= 50  THEN 50
      WHEN climate_alarm_score > 50 and climate_alarm_score <= 60  THEN 60
      WHEN climate_alarm_score > 60 and climate_alarm_score <= 70  THEN 70
      WHEN climate_alarm_score > 70 and climate_alarm_score <= 80  THEN 80
      WHEN climate_alarm_score > 80 and climate_alarm_score <= 90  THEN 90
      WHEN climate_alarm_score > 90 and climate_alarm_score <= 100  THEN 100
    ELSE NULL
    END AS climate_alarm_score_clean
  , ntl_current.ts_tsmart_ideology_score AS liberal_ideology_score
  , ntl_current.ts_tsmart_ideology_enhanced_score AS liberal_ideology_partisan_score
  , CASE
      WHEN liberal_ideology_partisan_score >= 0 and liberal_ideology_partisan_score <= 10 THEN 10
      WHEN liberal_ideology_partisan_score > 10 and liberal_ideology_partisan_score <= 20  THEN 20
      WHEN liberal_ideology_partisan_score > 20 and liberal_ideology_partisan_score <= 30  THEN 30
      WHEN liberal_ideology_partisan_score > 30 and liberal_ideology_partisan_score <= 40  THEN 40
      WHEN liberal_ideology_partisan_score > 40 and liberal_ideology_partisan_score <= 50  THEN 50
      WHEN liberal_ideology_partisan_score > 50 and liberal_ideology_partisan_score <= 60  THEN 60
      WHEN liberal_ideology_partisan_score > 60 and liberal_ideology_partisan_score <= 70  THEN 70
      WHEN liberal_ideology_partisan_score > 70 and liberal_ideology_partisan_score <= 80  THEN 80
      WHEN liberal_ideology_partisan_score > 80 and liberal_ideology_partisan_score <= 90  THEN 90
      WHEN liberal_ideology_partisan_score > 90 and liberal_ideology_partisan_score <= 100  THEN 100
    ELSE NULL
    END AS liberal_idealogy_partisan_score_clean
  , ntl_current.ts_tsmart_labor_union_support_score AS labor_union_support_score
  , ntl_current.ts_tsmart_cannabis_legal_support_score AS legal_cannabis_support_score
  , CASE
      WHEN legal_cannabis_support_score >= 0 and legal_cannabis_support_score <= 10 THEN 10
      WHEN legal_cannabis_support_score > 10 and legal_cannabis_support_score <= 20  THEN 20
      WHEN legal_cannabis_support_score > 20 and legal_cannabis_support_score <= 30  THEN 30
      WHEN legal_cannabis_support_score > 30 and legal_cannabis_support_score <= 40  THEN 40
      WHEN legal_cannabis_support_score > 40 and legal_cannabis_support_score <= 50  THEN 50
      WHEN legal_cannabis_support_score > 50 and legal_cannabis_support_score <= 60  THEN 60
      WHEN legal_cannabis_support_score > 60 and legal_cannabis_support_score <= 70  THEN 70
      WHEN legal_cannabis_support_score > 70 and legal_cannabis_support_score <= 80  THEN 80
      WHEN legal_cannabis_support_score > 80 and legal_cannabis_support_score <= 90  THEN 90
      WHEN legal_cannabis_support_score > 90 and legal_cannabis_support_score <= 100  THEN 100
    ELSE NULL
    END AS legal_cannabis_support_score_clean
  , ntl_current.ts_tsmart_marriage_equality_score AS marriage_equality_score
  , CASE
      WHEN marriage_equality_score >= 0 and marriage_equality_score <= 10 THEN 10
      WHEN marriage_equality_score > 10 and marriage_equality_score <= 20  THEN 20
      WHEN marriage_equality_score > 20 and marriage_equality_score <= 30  THEN 30
      WHEN marriage_equality_score > 30 and marriage_equality_score <= 40  THEN 40
      WHEN marriage_equality_score > 40 and marriage_equality_score <= 50  THEN 50
      WHEN marriage_equality_score > 50 and marriage_equality_score <= 60  THEN 60
      WHEN marriage_equality_score > 60 and marriage_equality_score <= 70  THEN 70
      WHEN marriage_equality_score > 70 and marriage_equality_score <= 80  THEN 80
      WHEN marriage_equality_score > 80 and marriage_equality_score <= 90  THEN 90
      WHEN marriage_equality_score > 90 and marriage_equality_score <= 100  THEN 100
    ELSE NULL 
    END AS marriage_equality_score_clean
  , ntl_current.ts_tsmart_recession_sensitivity_score AS recession_sensitivity_score
  , CASE
      WHEN recession_sensitivity_score >= 0 and recession_sensitivity_score <= 10 THEN 10
      WHEN recession_sensitivity_score > 10 and recession_sensitivity_score <= 20  THEN 20
      WHEN recession_sensitivity_score > 20 and recession_sensitivity_score <= 30  THEN 30
      WHEN recession_sensitivity_score > 30 and recession_sensitivity_score <= 40  THEN 40
      WHEN recession_sensitivity_score > 40 and recession_sensitivity_score <= 50  THEN 50
      WHEN recession_sensitivity_score > 50 and recession_sensitivity_score <= 60  THEN 60
      WHEN recession_sensitivity_score > 60 and recession_sensitivity_score <= 70  THEN 70
      WHEN recession_sensitivity_score > 70 and recession_sensitivity_score <= 80  THEN 80
      WHEN recession_sensitivity_score > 80 and recession_sensitivity_score <= 90  THEN 90
      WHEN recession_sensitivity_score > 90 and recession_sensitivity_score <= 100  THEN 100
    ELSE NULL
    END AS recession_sensitivity_score_clean
  , ntl_current.ts_tsmart_prochoice_score	 AS prochoice_score
  , CASE
      WHEN prochoice_score >= 0 and prochoice_score <= 10 THEN 10
      WHEN prochoice_score > 10 and prochoice_score <= 20  THEN 20
      WHEN prochoice_score > 20 and prochoice_score <= 30  THEN 30
      WHEN prochoice_score > 30 and prochoice_score <= 40  THEN 40
      WHEN prochoice_score > 40 and prochoice_score <= 50  THEN 50
      WHEN prochoice_score > 50 and prochoice_score <= 60  THEN 60
      WHEN prochoice_score > 60 and prochoice_score <= 70  THEN 70
      WHEN prochoice_score > 70 and prochoice_score <= 80  THEN 80
      WHEN prochoice_score > 80 and prochoice_score <= 90  THEN 90
      WHEN prochoice_score > 90 and prochoice_score <= 100  THEN 100
    ELSE NULL
    END AS prochoice_score_clean
  , ntl_current.ts_tsmart_path_to_citizen_score	AS path_to_citizen_score
  , ntl_current.ts_tsmart_climate_change_score AS climate_change_score
  , ntl_current.ts_tsmart_gun_control_score	AS gun_control_score

  , ntl_current.ts_tsmart_minimum_wage_score AS minimum_wage_score
  , ntl_current.ts_tsmart_progressive_tax_score AS progressive_tax_score
  , CASE
      WHEN progressive_tax_score >= 0 and progressive_tax_score <= 10 THEN 10
      WHEN progressive_tax_score > 10 and progressive_tax_score <= 20  THEN 20
      WHEN progressive_tax_score > 20 and progressive_tax_score <= 30  THEN 30
      WHEN progressive_tax_score > 30 and progressive_tax_score <= 40  THEN 40
      WHEN progressive_tax_score > 40 and progressive_tax_score <= 50  THEN 50
      WHEN progressive_tax_score > 50 and progressive_tax_score <= 60  THEN 60
      WHEN progressive_tax_score > 60 and progressive_tax_score <= 70  THEN 70
      WHEN progressive_tax_score > 70 and progressive_tax_score <= 80  THEN 80
      WHEN progressive_tax_score > 80 and progressive_tax_score <= 90  THEN 90
      WHEN progressive_tax_score > 90 and progressive_tax_score <= 100  THEN 100
    ELSE NULL
    END AS progressive_tax_score_clean
  
  , ntl_current.tmc_undocu_rights_support_c4_score AS undocu_rights_support_score
  , CASE
      WHEN undocu_rights_support_score >= 0 and undocu_rights_support_score <= 10 THEN 10
      WHEN undocu_rights_support_score > 10 and undocu_rights_support_score <= 20  THEN 20
      WHEN undocu_rights_support_score > 20 and undocu_rights_support_score <= 30  THEN 30
      WHEN undocu_rights_support_score > 30 and undocu_rights_support_score <= 40  THEN 40
      WHEN undocu_rights_support_score > 40 and undocu_rights_support_score <= 50  THEN 50
      WHEN undocu_rights_support_score > 50 and undocu_rights_support_score <= 60  THEN 60
      WHEN undocu_rights_support_score > 60 and undocu_rights_support_score <= 70  THEN 70
      WHEN undocu_rights_support_score > 70 and undocu_rights_support_score <= 80  THEN 80
      WHEN undocu_rights_support_score > 80 and undocu_rights_support_score <= 90  THEN 90
      WHEN undocu_rights_support_score > 90 and undocu_rights_support_score <= 100  THEN 100
    ELSE NULL
    END AS undocu_rights_support_score_clean
  , ntl_current.predictwise_healthcare_score AS healthcare_score
  
  /*, ntl_current.predictwise_criminal_justice_reform_score
  , ntl_current.predictwise_economic_populism_score
  , ntl_current.predictwise_environmentalism_score
  , ntl_current.predictwise_guns_score
  , ntl_current.predictwise_healthcare_women_score
  , ntl_current.predictwise_immigrants_score
  , ntl_current.predictwise_income_inequality_score
  , ntl_current.predictwise_military_score
  , ntl_current.predictwise_populism_score
  , ntl_current.predictwise_regulation_score*/
  

   , ntl_current.vb_purely_social_networker_demi_decile AS purely_social_network_score
  	-- ^Such as Facebook. 1 represents those most likely and 20 represents those least likely.
  , ntl_current.vb_personal_voice_social_networker_demi_decile AS personal_voice_social_network_score
  	-- ^Such as Twitter. 1 represents those most likely and 20 represents those least likely.
  , ntl_current.vb_professional_social_networker_demi_decile AS professional_social_network_score
  	-- ^Such as LinkedIn. 1 represents those most likely and 20 represents those least likely.

FROM ak_tmc_join
LEFT JOIN ts.ntl_current
	ON ntl_current.vb_voterbase_id = ak_tmc_join.tmc_voterbase_id

WHERE latest_voterbase_id_match = 1
  -- Filtering to only match to latest matched voterbase_id from the Activist Pool. This is because one voterbase_id may be matched to hundreds of person_ids.
)


--Final select keeps all original ak_userids from ActionKit, in order to facilitate joining

SELECT
	ak_userid::varchar
  , tmc_person_id
  , tmc_voterbase_id

/* These fields rank the person_id and voterbase_id matched with an ak_userid, with the most recent match being '1'. This final select includes all ak_userids. But if you wanted to query this table on uique person_ids or voterbase_ids, you could use one of these fields as a filter. */
  , latest_person_id_match
  , latest_voterbase_id_match
  
  , tmc_first_name
  , tmc_last_name
  , ak_email
  , ak_sub_status
  , ak_count_actions

/* For location fields, filtering for fields from the voterbase first in order to keep consistent data source for records that are matching to the voterbase. If the record does not match, the location comes from Action Kit.*/
  , NVL(vb_city, ak_city) AS city
  , NVL(vb_state, ak_state) AS state
  , NVL(vb_zip , ak_zip) AS zipcode
  
  , voterfile_join.*
  
FROM ak_tmc_join

LEFT JOIN voterfile_join
	ON ak_tmc_join.ak_userid = voterfile_join.vb_ak_userid
;


-- Grant access:
GRANT SELECT ON coc_reporting.ak_vf_member_demographics TO GROUP coc;
GRANT ALL ON coc_reporting.ak_vf_member_demographics TO jharris1;